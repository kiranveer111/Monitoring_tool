const nodemailer = require('nodemailer');
const snmp = require('net-snmp');
const config = require('../config');
const logger = require('../utils/logger');
const { getDB } = require('../db/connection');

// Nodemailer setup
const transporter = nodemailer.createTransport({
  host: config.smtp.host,
  port: config.smtp.port,
  secure: config.smtp.secure,
  auth: {
    user: config.smtp.auth.user,
    pass: config.smtp.auth.pass
  }
});

const sendEmail = async (to, subject, text, html) => {
  if (!to || !config.smtp.auth.user || !config.smtp.auth.pass || !config.smtp.host) {
    logger.warn('Email skipped: missing SMTP config or recipient');
    return;
  }

  try {
    const info = await transporter.sendMail({
      from: config.smtp.auth.user,
      to,
      subject,
      text,
      html
    });
    logger.info(`Email sent to ${to}: ${info.messageId}`);
  } catch (error) {
    logger.error(`Failed to send email to ${to}: ${error.message}`);
    if (config.app.env === 'development') {
      logger.error(`Nodemailer debug: ${JSON.stringify(error)}`);
    }
  }
};

const sendSnmpTrap = (receiverHost, community, oid, value, type = snmp.ObjectType.OctetString) => {
  if (!oid || typeof oid !== 'string' || !/^(\.\d+)+$/.test(oid)) {
    logger.warn(`Invalid SNMP OID string: ${oid}`);
    return;
  }
  if (!receiverHost || !community) {
    logger.warn('SNMP skipped: missing receiverHost or community');
    return;
  }

  const varbinds = [{ oid, type, value }];

  const snmpSession = snmp.createSession(receiverHost, community, { timeout: 5000 });

  snmpSession.trap(snmp.TrapType.LinkUp, varbinds, (error) => {
    if (error) {
      logger.error(`SNMP trap error: ${error.message}`);
      if (config.app.env === 'development') {
        logger.error(`SNMP debug: ${JSON.stringify(error)}`);
      }
    } else {
      logger.info(`SNMP trap sent to ${receiverHost} for OID: ${oid}`);
    }
    snmpSession.close();
  });
};

const getUserAlertConfig = async (userId) => {
  const db = getDB();
  try {
    const [rows] = await db.execute(
      `SELECT email_recipient, snmp_receiver_host, snmp_community, snmp_api_down_oid, snmp_cert_expiry_oid, cert_warning_days
       FROM AlertConfigs WHERE user_id = ?`,
      [userId]
    );

    const userConfig = rows[0];

    return {
      emailRecipient: userConfig?.email_recipient || config.alerting?.defaultEmailRecipient,
      receiverHost: userConfig?.snmp_receiver_host || config.alerting?.snmp?.receiverHost,
      community: userConfig?.snmp_community || config.alerting?.snmp?.community,
      apiDownOID: userConfig?.snmp_api_down_oid || config.alerting?.snmp?.apiDownOID,
      certExpiryOID: userConfig?.snmp_cert_expiry_oid || config.alerting?.snmp?.certExpiryOID,
      certWarningDays: userConfig?.cert_warning_days || config.alerting?.certWarningDays
    };
  } catch (error) {
    logger.error(`Failed to fetch alert config for user ${userId}: ${error.message}`);
    return {
      emailRecipient: config.alerting?.defaultEmailRecipient,
      receiverHost: config.alerting?.snmp?.receiverHost,
      community: config.alerting?.snmp?.community,
      apiDownOID: config.alerting?.snmp?.apiDownOID,
      certExpiryOID: config.alerting?.snmp?.certExpiryOID,
      certWarningDays: config.alerting?.certWarningDays
    };
  }
};

const sendApiDownAlert = async (userId, url, errorMessage) => {
  const alert = await getUserAlertConfig(userId);

  const subject = `CRITICAL: API ${url} is DOWN!`;
  const html = `
    <p>The API <strong>${url}</strong> is unreachable or returned an error.</p>
    <p><strong>Error:</strong> ${errorMessage}</p>
    <p>This alert was generated by your Monitoring Tool.</p>
  `;

  if (alert.emailRecipient) {
    await sendEmail(alert.emailRecipient, subject, html.replace(/<[^>]+>/g, ''), html);
  }

  if (alert.receiverHost && alert.apiDownOID) {
    sendSnmpTrap(alert.receiverHost, alert.community, alert.apiDownOID, `API Down: ${url} - ${errorMessage}`);
  }
};

const sendCertificateExpiryAlert = async (userId, url, expiryDate, daysRemaining) => {
  const alert = await getUserAlertConfig(userId);

  let subject, html;

  if (daysRemaining <= 0) {
    subject = `CRITICAL: Certificate for ${url} has EXPIRED!`;
    html = `
      <p>The SSL certificate for <strong>${url}</strong> expired on <strong>${expiryDate.toDateString()}</strong>.</p>
      <p>Please renew the certificate immediately to avoid service disruptions.</p>
    `;
  } else {
    subject = `WARNING: Certificate for ${url} expires in ${daysRemaining} days!`;
    html = `
      <p>The SSL certificate for <strong>${url}</strong> will expire on <strong>${expiryDate.toDateString()}</strong> (<strong>${daysRemaining} days left</strong>).</p>
      <p>Please renew it soon to avoid service disruptions.</p>
    `;
  }

  if (alert.emailRecipient) {
    await sendEmail(alert.emailRecipient, subject, html.replace(/<[^>]+>/g, ''), html);
  }

  if (alert.receiverHost && alert.certExpiryOID) {
    sendSnmpTrap(alert.receiverHost, alert.community, alert.certExpiryOID, `Cert Expiry: ${url} in ${daysRemaining} days`);
  }
};

module.exports = {
  sendEmail,
  sendSnmpTrap,
  sendApiDownAlert,
  sendCertificateExpiryAlert,
  getUserAlertConfig
};
